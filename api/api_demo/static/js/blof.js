// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('blof', ['ngResource', 'authAPI', 'ngAnimate', 'ngSanitize', 'ngToast']).config([
    '$httpProvider', function($httpProvider) {
      $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
      $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    }
  ]).config([
    'ngToastProvider', function(ngToast) {
      return ngToast.configure({
        verticalPosition: 'bottom',
        horizontalPosition: 'left'
      });
    }
  ]).factory('api', function($resource) {
    return {
      posts: $resource('api_demo/api/posts/#', {}, {
        list: {
          method: 'GET',
          isArray: true
        },
        create: {
          method: 'POST'
        },
        detail: {
          method: 'GET',
          url: 'api_demo/api/posts/:id'
        },
        "delete": {
          method: 'DELETE',
          url: 'api_demo/api/posts/:id'
        }
      })
    };
  }).controller('authController', function($scope, authAPI, authState, ngToast) {
    $scope.errorMessage = "";
    $scope.$watch('errorMessage', function(newValue, oldValue) {
      if (newValue) {
        return ngToast.create({
          content: newValue,
          "class": "warning"
        });
      }
    });
    $scope.authState = authState;
    $scope.getCredentials = function() {
      return {
        username: $scope.username,
        password: $scope.password
      };
    };
    $scope.login = function() {
      authAPI.auth.login($scope.getCredentials()).$promise.then(function(data) {
        authState.user = data.username;
      })["catch"](function(data) {
        $scope.errorMessage = data.data.detail;
      });
    };
    $scope.logout = function() {
      authAPI.auth.logout(function() {
        authState.user = null;
      });
    };
    return $scope.register = function($event) {
      $event.preventDefault();
      return authAPI.users.create($scope.getCredentials()).$promise.then($scope.login)["catch"](function(data) {
        if (data.data.username) {
          $scope.errorMessage = data.data.username;
        } else if (data.data.password) {
          $scope.errorMessage = data.data.password;
        }
      });
    };
  }).controller('postController', function($scope, api, authState) {
    $scope.authState = authState;
    $scope.list = function() {
      api.posts.list(function(data) {
        $scope.posts = data;
      });
    };
    $scope.list();
    $scope.create = function() {
      var data;
      data = {
        body: $scope.body
      };
      api.posts.create(data, function(data) {
        $scope.body = '';
        $scope.posts.unshift(data);
      });
    };
    $scope["delete"] = function(id) {
      api.posts["delete"]({
        id: id
      }, function() {
        $scope.posts.splice($scope.utils.getPostIndex(id), 1);
      });
    };
    return $scope.utils = {
      getPostIndex: function(id) {
        return _.indexOf($scope.posts, _.findWhere($scope.posts, {
          id: id
        }));
      }
    };
  });

}).call(this);
